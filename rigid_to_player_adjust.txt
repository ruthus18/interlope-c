‚óè Great question! To adjust the force applied to rigid cubes by the player in the future,
  you would modify the collision callback in src/physics.c. Here are the key approaches:

  Current State

  Right now, kinematic-rigid collisions are skipped entirely (no force applied):
  if (is_kinematic) {
      // Contact only affects player, not cubes
      dJointAttach(c, kinematic_body, NULL);
  }

  Future Force Adjustment Options

  1. Re-enable with Limited Force

  Replace the current kinematic collision handling with:
  if (is_kinematic) {
      contact[i].surface.mode = dContactBounce | dContactSoftERP | dContactSoftCFM;
      contact[i].surface.mu = 0.0;  // No friction
      contact[i].surface.bounce = 0.01;  // Minimal bounce
      contact[i].surface.soft_erp = 0.08;  // Lower = gentler force
      contact[i].surface.soft_cfm = 0.05;  // Higher = softer contact

      // Normal two-body contact
      dJointID c = dJointCreateContact(self.world, self.contact_group, &contact[i]);
      dJointAttach(c, body1, body2);
  }

  2. Force Scaling Parameters

  Add adjustable force scaling:
  - soft_erp: 0.01-0.2 (lower = gentler pushing)
  - soft_cfm: 0.001-0.1 (higher = softer contact)
  - bounce: 0.001-0.1 (lower = less bouncing)

  3. Mass-Based Scaling

  Make force proportional to cube mass:
  // Get cube mass and scale force accordingly
  dMass cube_mass;
  dBodyGetMass(rigid_body, &cube_mass);
  float force_scale = 1.0f / (cube_mass.mass * 0.1f);  // Heavier = less force
  contact[i].surface.soft_erp = 0.1f * force_scale;

  4. Player Speed-Based Force

  Make force depend on player movement speed for more realistic physics.

  The key parameters to adjust are soft_erp (separation force) and soft_cfm (contact softness) in the kinematic collision section around
  src/physics.c:523.